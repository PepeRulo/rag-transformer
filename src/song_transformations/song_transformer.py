# Author: Jose
# Python 3.8.1

from os import listdir
from os.path import join
import logging
from song_transformations.pattern_extractors import *
from song_transformations.algorithm_1 import algorithm_1
import music21


# Move all code here that deals with a single file, not all of them
def song_transformer(filename):
    pass


# Just in case this module is ran by itself: transform
# all xmk songs at once. These are the input (classical) songs
def main(pattern_length=8):
    """

    :param int pattern_length: must be a multiple of 8 (that is the size used
                               by the rag dataset patterns).
    :return:
    """
    xmk_dir = "/Users/jose/Documents/Rhodes/Year_4/Research/Midireader/midiReader/input/xm"
    # Big operation: ~O( ??? * n^???)
    dataset_patterns = rag_dataset_pattern_extractor(pattern_length)
    for song_file in listdir(xmk_dir):
        if song_file.endswith(".xmk"):
            filename = join(xmk_dir, song_file)
            try:
                # Big performance bottleneck: ~O( ??? * n^???)
                song_patterns = song_patterns_extractor(filename, pattern_length)
            except ValueError as error:
                logging.warning(f"In {filename.split('/')[-1]}: {error}")
                continue

            # compare_with_java_patterns(song_file, song_patterns)

            song_notes = get_song_notes(filename)
            song_chords = get_song_chords(filename)

            new_song = algorithm_1(song_notes, song_chords, song_patterns, dataset_patterns, pattern_length)
            new_song.show()

    return 0


def compare_with_java_patterns(song, patterns):
    """ Test that the patterns used in both code-bases are equivalent.

    This function compares the patterns of an xmk song generated by my code
    with the ones generated by the Java code. For the comparison to be made,
    a `pattern_length` of 16 should be specified in song_patterns_extractor()
    so that this function gets called with a valid `patterns` argument.

    Notes:
    - Original "spring.xmk" has messed up measure numbers. I modified my local
      copy and ran both the Java and Python (this) code with that corrected
      version.
    - "jinglebells.xmk" had an empty measure 0 at the end of the file;
      corrected my local version and ran both codes with it.
    - The Java patterns for the "menuet in g.xmk" are off, mine look good.
      Notice that this song has a time signature of 3/4, which means that
      the last 4 positions of a length-16 pattern are necessarily '0',
      which can be seen in my patterns.
    - Found that measure 10 of "kleine.xmk" is missing a beat in the xmk.

    Called by (depends on) main().

    :param song: the xmk file.
    :param patterns: a list of patterns corresponding to the song's measures.
    :return: any discrepancies are logged in the output console.
    """
    java_code_song_patterns = {
        "yankeeDb.xmk": ['1000100010001000', '1000100010001000', '1000100010001000', '1000000010000000',
                         '1000100010001000', '1000100010001000', '1000100010001000', '1000000010000000',
                         '1000001010001000', '1000100010000000', '1000001010001000', '1000000010000000',
                         '1000001010001000', '1000100010001000', '1000100010001000', '1000000010000000'],
        "hark.xmk": ['1000100010000010', '1000100010001000', '1000100010000010', '1000100010000000', '1000100010000010',
                     '1000100010001000', '1000100010000010', '1000100010000000', '1000100010001000', '1000100010001000',
                     '1000100010001000', '1000100010001000', '1000100010001000', '1000100010000000', '1000101010000010',
                     '1000100010000000', '1000001010001000', '1000100010000000', '1000101010000010',
                     '1000100010000000'],
        "danceSugarPlum.xmk": ['0000101010001000', '1000100010101000', '1010100010101000', '1010101010101010',
                               '0000101010001000', '1000100010101000', '1010100010101000', '1010101010101010',
                               '0000101010001000', '1000100010101000', '1010100010101000'],
        "mcdonald.xmk": ['1000100010001000', '1000100010000000', '1000100010001000', '1000000000001000',
                         '1000100010001000', '1000100010000000', '1000100010001000', '1000000000001010',
                         '1000100010001010', '1000100010000000', '1010100010101000', '1010101010001000',
                         '1000100010001000', '1000100010000000', '1000100010001000', '1000000000000000'],
        "spring.xmk": ['0000000000001000', '1000100010001010', '1000000000001010', '1000100010001010',
                       '1000000000001010', '1000101010001000', '1000000000001000', '1000101010001000',
                       '1000100000001000', '1000100000001000', '1000101010000000', '1000000000001000',
                       '1000000000000000'],
        "menuet in g.xmk": ['1000101010101000', '1000100010001010', '1010100010001000', '1000101010101000',
                            '1010101010001010', '1010100000000000', '1000101010101000', '1000100010001010',
                            '1010100010001000', '1000101010101000', '1010101010001010', '1010100000000000',
                            '1000101010101000', '1010101010001010', '1010100010101000', '1010101010101000',
                            '1000100010001000', '1000100000000000', '1000101010001000', '1010100010001000',
                            '1000101010101000', '1010101010101000', '1000100010101000', '1000100000000000'],
        "kleine.xmk": ['1000001010000010', '1010101010000000', '1000001010000010', '1010101010000000',
                       '1000100000101010', '1010100000101010', '1010100000101010', '1010100000101010',
                       '1010111110101111', '1010111100001000'],
        "jinglebells.xmk": ['1000100010001000', '1000000000001010', '1000100010001000', '1000000000000000',
                            '1000100010001000', '1000000000000000', '1000100010001000', '1000000000000000',
                            '1000100010001000', '1000000000001000', '1000100010001000', '1000000000000000',
                            '1000100010001000', '1000100010001000', '1000100010001000', '1000000010000000',
                            '1000100010000000', '1000100010000000', '1000100010001000', '1000000000000000',
                            '1000100010000010', '1000100010001010', '1000100010001000', '1000000010000000',
                            '1000100010000000', '1000100010000000', '1000100010001000', '1000000000000000',
                            '1000100010000010', '1000100010001010', '1000100010001000', '1000000000000000'],
        "odeToJoy.xmk": ['1000100010001000', '1000100010001000', '1000100010001000', '1000001010000000',
                         '1000100010001000', '1000100010001000', '1000100010001000', '1000001010000000',
                         '1000100010001000', '1000101010001000', '1000101010001000', '1000100010000000',
                         '1000100010001000', '1000100010001000', '1000100010001000', '1000001010000000'],
        "deckthehalls.xmk": ['1000001010001000', '1000100010001000', '1010101010000010', '1000100010000000',
                             '1000001010001000', '1000001010001000', '1010100010101000', '1000100010000000',
                             '1000001010001000', '1000100010001000', '1010101010000010', '1000100010000000']}
    java_patterns = java_code_song_patterns[song]

    inconsistency = False

    if len(java_patterns) != len(patterns):
        logging.warning(f"{song}: The number of patterns differ between Java and Python code.")
        # It seems that some Java patterns are missing the last measure.
        # So, only compare those.
        for i in range(len(java_patterns)):
            if java_patterns[i] != patterns[i]:
                logging.warning(f"{song}: Patterns differ in measure {i + 1}")
                inconsistency = True
        if not inconsistency:
            print(f"{song}: All good!")
        return

    for i in range(len(patterns)):
        if java_patterns[i] != patterns[i]:
            logging.warning(f"{song}: Patterns differ in measure {i+1}")
            inconsistency = True

    if not inconsistency:
        print(f"{song}: All good!")

    return


if __name__ == '__main__':
    main(16)


# Not used (but functional) #

def clean_java_patterns():
    """ Adapt the song patterns used in the Java code.

    These processed patterns are what `java_code_song_patterns` contains in
    compare_with_java_patterns().

    :return: a song's patterns with the syntax used in this program.
    """
    patterns = input()
    patterns = patterns.strip("[]")
    patterns = patterns.replace(',', '')
    patterns = patterns.replace('I', '1')
    patterns = patterns.replace('O', '0')
    patterns = patterns.split()
    return patterns
